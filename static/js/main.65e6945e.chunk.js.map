{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["observer","IntersectionObserver","entries","reverse","forEach","entry","isIntersecting","target","dispatchEvent","Event","App","ref","createRef","state","json","nextPage","fetch","this","then","res","setState","observe","current","addEventListener","images","map","img","idx","key","src","download_url","className","image","length","React","Component","LazyImage","url","e","props","nextProps","nextState","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6PAGIA,G,MAAW,IAAIC,sBAAqB,SAASC,EAASF,GACxDE,EAAQC,UAAUC,SAAQ,SAAAC,GACrBA,EAAMC,gBACPD,EAAME,OAAOC,cAAc,IAAIC,MAAM,mBAKrCC,E,kDACJ,aAAc,IAAD,8BACX,gBACKC,IAAMC,sBACX,EAAKC,MAAQ,CAACC,KAAM,CAAC,IAAKC,SAAU,GAHzB,E,gEAKO,IAAD,OACjBC,MAAM,+CAAD,OAAgDC,KAAKJ,MAAME,WAC/DG,MAAK,SAAAC,GAAG,OAAIA,EAAIL,UAChBI,MAAK,SAACJ,GACL,EAAKM,SAAS,CAACN,OAAMC,SAAU,EAAKF,MAAME,SAAW,S,2CAGpC,IAAD,OAClBf,EAASqB,QAAQJ,KAAKN,IAAIW,SAC1BL,KAAKN,IAAIW,QAAQC,iBAAiB,WAAW,WAC3CP,MAAM,+CAAD,OAAgD,EAAKH,MAAME,WAC/DG,MAAK,SAAAC,GAAG,OAAIA,EAAIL,UAChBI,MAAK,SAACJ,GACL,EAAKM,SAAS,CAACN,KAAK,GAAD,mBAAM,EAAKD,MAAMC,MAAjB,YAAyBA,IAAOC,SAAU,EAAKF,MAAME,SAAW,Y,+BAI/E,IAAD,OACHS,EAASP,KAAKJ,MAAMC,KAAKW,KAAI,SAACC,EAAKC,GAAN,OAAc,kBAAC,EAAD,CAAWC,IAAKD,EAAKE,IAAKH,EAAII,kBAC7E,OACA,yBAAKC,UAAU,OACZP,EAAOC,KAAI,SAACO,EAAOL,GAAR,OAAgBA,IAAQH,EAAOS,OAAO,EAAI,yBAAKL,IAAKD,EAAKhB,IAAK,EAAKA,KAAMqB,GAAeA,U,GA3BxFE,IAAMC,WAiClBC,E,kDACJ,aAAc,IAAD,8BACX,gBACKzB,IAAMC,sBACX,EAAKC,MAAQ,CAACwB,IAAK,IAHR,E,gEAKO,IAAD,OACjBrC,EAASqB,QAAQJ,KAAKN,IAAIW,SAE1BL,KAAKN,IAAIW,QAAQC,iBAAiB,WAAW,SAACe,GAC5C,EAAKlB,SAAS,CAACiB,IAAK,EAAKE,MAAMV,W,4CAIbW,EAAWC,GAC/B,OAAGxB,KAAKJ,MAAMwB,MAAQI,EAAUJ,M,+BAMzB,IACFA,EAAOpB,KAAKJ,MAAZwB,IACL,OAAQ,yBAAKN,UAAU,YAAYpB,IAAKM,KAAKN,KAAK,yBAAK+B,IAAI,gBAAgBb,IAAKQ,S,GAvB5DH,IAAMC,WA2BfzB,IC3DKiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.65e6945e.chunk.js","sourcesContent":["import React, {createRef} from 'react';\nimport './App.css';\n\nlet observer = new IntersectionObserver(function(entries, observer){\n  entries.reverse().forEach(entry =>{\n    if(entry.isIntersecting){\n      entry.target.dispatchEvent(new Event('showing'));\n    }\n  })\n});\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.ref = createRef();\n    this.state = {json: [''], nextPage: 1}\n  }\n  componentDidMount(){\n    fetch(`https://picsum.photos/v2/list?limit=20&page=${this.state.nextPage}`)\n    .then(res => res.json())\n    .then((json) =>{\n      this.setState({json, nextPage: this.state.nextPage + 1});\n    });\n  }\n  componentDidUpdate(){\n    observer.observe(this.ref.current);\n    this.ref.current.addEventListener('showing', () => {\n      fetch(`https://picsum.photos/v2/list?limit=20&page=${this.state.nextPage}`)\n      .then(res => res.json())\n      .then((json) =>{\n        this.setState({json: [...this.state.json,...json], nextPage: this.state.nextPage + 1});\n      });\n    })\n  }\n  render() {\n    let images = this.state.json.map((img, idx) => <LazyImage key={idx} src={img.download_url}></LazyImage>)\n    return (\n    <div className=\"App\">\n      {images.map((image, idx) => idx === images.length-1 ? <div key={idx} ref={this.ref}>{image}</div> : image)}\n    </div>\n  )};\n}\n\n\nclass LazyImage extends React.Component {\n  constructor(){\n    super();\n    this.ref = createRef();\n    this.state = {url: ''}\n  }\n  componentDidMount(){\n    observer.observe(this.ref.current);\n\n    this.ref.current.addEventListener('showing', (e) => {\n      this.setState({url: this.props.src});\n    })\n  }\n  \n  shouldComponentUpdate(nextProps, nextState){\n    if(this.state.url === nextState.url){\n      return false;\n    } else {\n      return true;\n    }\n  }\n  render(){\n    let {url} = this.state;\n    return (<div className=\"lazyImage\" ref={this.ref}><img alt=\"random picsum\" src={url}></img></div>)\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}